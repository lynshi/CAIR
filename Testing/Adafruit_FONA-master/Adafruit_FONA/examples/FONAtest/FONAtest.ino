/***************************************************
  This is an example for our Adafruit FONA Cellular Module

  Designed specifically to work with the Adafruit FONA
  ----> http://www.adafruit.com/products/1946
  ----> http://www.adafruit.com/products/1963
  ----> http://www.adafruit.com/products/2468
  ----> http://www.adafruit.com/products/2542

  These cellular modules use TTL Serial to communicate, 2 pins are
  required to interface
  Adafruit invests time and resources providing this open source code,
  please support Adafruit and open-source hardware by purchasing
  products from Adafruit!

  Written by Limor Fried/Ladyada for Adafruit Industries.
  BSD license, all text above must be included in any redistribution
 ****************************************************/

/*
THIS CODE IS STILL IN PROGRESS!

Open up the serial console on the Arduino at 115200 baud to interact with FONA

Note that if you need to set a GPRS APN, username, and password scroll down to
the commented section below at the end of the setup() function.
*/
#include "Adafruit_FONA.h"
#include "PCM.h"

#define FONA_RX 50
#define FONA_TX 51
#define FONA_RST 22

// this is a large buffer for replies
char replybuffer[255];
const unsigned char zero[] PROGMEM = {
 126, 127, 127, 128, 128, 128, 128, 127, 127, 128, 127, 126, 126, 126, 127, 126, 125, 125, 126, 127, 128, 126, 127, 127, 128, 128, 127, 127, 128, 128, 129, 128, 127, 127, 127, 127, 128, 127, 127, 128, 128, 128, 127, 126, 127, 127, 127, 125, 123, 123, 122, 121, 121, 121, 123, 124, 124, 124, 125, 126, 128, 128, 129, 133, 134, 136, 137, 138, 142, 144, 145, 146, 145, 146, 147, 144, 143, 141, 139, 139, 136, 133, 132, 129, 127, 126, 124, 124, 122, 119, 118, 117, 117, 115, 112, 112, 114, 112, 111, 108, 108, 111, 112, 112, 113, 114, 115, 117, 117, 117, 116, 115, 116, 116, 116, 114, 114, 118, 124, 128, 130, 134, 142, 148, 152, 153, 155, 160, 165, 165, 164, 162, 160, 158, 154, 147, 141, 136, 133, 130, 126, 124, 123, 126, 127, 126, 128, 129, 129, 130, 128, 127, 129, 126, 122, 121, 119, 118, 116, 113, 114, 116, 115, 114, 113, 115, 114, 112, 113, 113, 112, 112, 110, 110, 113, 111, 110, 112, 115, 117, 117, 117, 120, 124, 125, 123, 122, 124, 122, 121, 120, 120, 123, 127, 129, 133, 137, 139, 143, 145, 147, 149, 149, 151, 153, 152, 152, 150, 148, 147, 144, 142, 140, 138, 138, 136, 137, 137, 135, 138, 138, 137, 139, 137, 135, 139, 135, 130, 130, 126, 124, 123, 116, 114, 117, 116, 113, 111, 111, 111, 111, 110, 106, 106, 111, 108, 107, 109, 106, 111, 116, 112, 114, 118, 116, 121, 120, 116, 119, 122, 123, 125, 125, 126, 128, 128, 128, 125, 125, 126, 127, 129, 130, 130, 133, 135, 136, 138, 138, 141, 144, 148, 150, 150, 152, 154, 153, 153, 152, 149, 149, 148, 144, 144, 142, 137, 136, 134, 131, 129, 127, 124, 125, 125, 120, 118, 120, 118, 119, 119, 115, 118, 120, 116, 118, 121, 118, 122, 123, 119, 121, 120, 118, 119, 118, 116, 117, 116, 117, 117, 117, 118, 117, 119, 119, 116, 119, 122, 122, 122, 121, 121, 125, 125, 123, 123, 125, 128, 126, 124, 126, 128, 133, 134, 128, 130, 137, 138, 140, 138, 139, 146, 147, 144, 145, 145, 148, 149, 144, 142, 141, 137, 140, 140, 135, 134, 132, 130, 135, 132, 127, 129, 130, 129, 131, 128, 127, 130, 129, 125, 122, 120, 122, 122, 119, 119, 118, 118, 116, 113, 115, 118, 117, 116, 117, 118, 118, 118, 120, 119, 119, 121, 120, 122, 124, 121, 121, 123, 120, 121, 126, 128, 130, 137, 137, 134, 136, 134, 131, 134, 131, 128, 132, 130, 129, 133, 130, 128, 127, 126, 127, 122, 120, 124, 121, 122, 121, 114, 119, 120, 113, 116, 117, 115, 118, 117, 118, 120, 119, 119, 118, 118, 122, 119, 119, 123, 120, 121, 123, 118, 122, 125, 121, 123, 128, 127, 125, 125, 124, 125, 127, 124, 122, 128, 130, 127, 130, 131, 132, 136, 138, 139, 140, 141, 142, 141, 140, 139, 140, 139, 137, 138, 140, 139, 136, 132, 133, 136, 131, 129, 132, 134, 135, 132, 129, 132, 131, 128, 127, 124, 124, 125, 120, 119, 121, 122, 121, 117, 116, 119, 119, 120, 119, 118, 121, 124, 123, 118, 117, 121, 121, 114, 114, 117, 119, 121, 120, 121, 123, 122, 121, 121, 121, 123, 123, 125, 124, 121, 127, 130, 124, 127, 131, 129, 133, 132, 131, 138, 136, 135, 142, 139, 136, 143, 143, 138, 138, 138, 138, 141, 138, 135, 138, 139, 137, 133, 131, 135, 138, 130, 128, 135, 134, 130, 129, 126, 128, 129, 120, 120, 126, 123, 121, 123, 123, 125, 122, 118, 123, 124, 117, 117, 119, 117, 119, 118, 114, 120, 123, 118, 119, 121, 120, 121, 122, 122, 122, 123, 126, 125, 121, 122, 125, 123, 122, 122, 122, 124, 125, 125, 124, 124, 129, 131, 126, 125, 133, 139, 136, 134, 138, 143, 141, 138, 139, 142, 144, 143, 141, 140, 142, 139, 137, 136, 131, 129, 135, 131, 120, 123, 129, 124, 122, 125, 125, 128, 133, 129, 127, 132, 135, 130, 126, 128, 129, 126, 125, 123, 121, 122, 122, 118, 116, 116, 116, 118, 118, 113, 114, 120, 119, 114, 116, 120, 121, 120, 117, 114, 117, 119, 116, 116, 121, 124, 127, 130, 124, 124, 136, 135, 126, 131, 139, 139, 137, 137, 138, 143, 146, 140, 139, 147, 149, 141, 141, 147, 143, 137, 139, 136, 130, 133, 133, 128, 131, 132, 128, 131, 130, 126, 130, 132, 125, 126, 130, 124, 120, 125, 126, 122, 120, 120, 119, 115, 110, 109, 113, 114, 111, 114, 120, 118, 115, 118, 118, 115, 116, 115, 114, 115, 116, 114, 116, 121, 120, 118, 122, 128, 127, 127, 132, 138, 141, 140, 138, 143, 148, 143, 140, 148, 151, 147, 148, 147, 146, 151, 150, 141, 141, 146, 140, 131, 130, 131, 132, 130, 121, 122, 130, 121, 108, 114, 120, 114, 111, 111, 115, 121, 115, 107, 118, 127, 119, 116, 121, 125, 129, 125, 118, 126, 135, 126, 115, 118, 125, 124, 115, 114, 122, 126, 122, 115, 114, 127, 131, 117, 119, 135, 138, 133, 134, 140, 150, 150, 143, 146, 151, 149, 147, 141, 140, 150, 143, 130, 137, 140, 130, 130, 124, 119, 133, 126, 106, 119, 131, 119, 116, 122, 127, 133, 124, 114, 128, 138, 124, 115, 122, 130, 124, 111, 109, 120, 125, 118, 108, 116, 132, 120, 102, 116, 123, 107, 109, 112, 103, 112, 116, 100, 113, 132, 115, 116, 141, 137, 132, 149, 150, 145, 158, 155, 146, 162, 164, 144, 148, 155, 142, 139, 141, 132, 138, 143, 130, 138, 152, 138, 135, 147, 137, 138, 149, 129, 123, 140, 123, 107, 120, 116, 107, 116, 110, 106, 120, 111, 103, 119, 117, 105, 113, 110, 103, 109, 98, 84, 97, 95, 78, 84, 93, 93, 108, 118, 117, 135, 150, 144, 151, 169, 167, 161, 166, 169, 167, 162, 157, 158, 154, 143, 145, 149, 141, 139, 143, 142, 142, 144, 139, 142, 147, 138, 133, 141, 137, 127, 127, 129, 124, 118, 116, 113, 107, 108, 105, 96, 95, 95, 83, 84, 90, 78, 74, 80, 72, 69, 74, 71, 86, 113, 114, 120, 147, 157, 161, 175, 176, 181, 197, 188, 179, 194, 188, 164, 161, 161, 149, 140, 129, 121, 125, 126, 118, 118, 128, 137, 143, 148, 154, 162, 163, 160, 156, 155, 150, 139, 127, 121, 115, 104, 91, 84, 84, 78, 68, 69, 72, 64, 59, 56, 48, 50, 58, 56, 68, 100, 119, 126, 142, 163, 179, 185, 184, 197, 213, 200, 179, 183, 185, 163, 143, 141, 145, 134, 113, 109, 122, 125, 117, 121, 135, 142, 149, 160, 167, 170, 173, 173, 168, 162, 152, 141, 133, 126, 116, 106, 92, 79, 77, 74, 65, 63, 64, 58, 52, 52, 51, 53, 57, 62, 83, 106, 114, 128, 154, 172, 179, 184, 188, 198, 206, 194, 181, 185, 183, 162, 146, 141, 139, 130, 113, 106, 115, 118, 109, 112, 131, 147, 149, 154, 171, 183, 178, 171, 171, 169, 153, 134, 124, 119, 111, 103, 89, 74, 76, 77, 64, 62, 69, 65, 59, 54, 48, 55, 60, 56, 81, 121, 128, 130, 160, 184, 189, 189, 192, 201, 204, 189, 183, 185, 165, 140, 134, 127, 110, 102, 104, 108, 113, 118, 127, 140, 152, 163, 174, 184, 188, 187, 185, 180, 165, 148, 135, 120, 110, 105, 93, 82, 82, 81, 72, 66, 67, 69, 65, 57, 52, 50, 44, 43, 52, 69, 97, 127, 142, 153, 177, 196, 201, 204, 208, 207, 195, 175, 163, 164, 149, 118, 112, 124, 116, 99, 100, 116, 130, 130, 134, 157, 176, 174, 180, 199, 200, 191, 185, 173, 157, 141, 119, 104, 101, 93, 82, 74, 67, 70, 83, 79, 67, 71, 75, 64, 50, 44, 43, 44, 50, 72, 106, 128, 136, 155, 181, 190, 194, 206, 213, 208, 199, 185, 173, 165, 147, 125, 116, 112, 102, 94, 95, 103, 116, 126, 139, 162, 181, 185, 189, 205, 211, 197, 180, 173, 160, 131, 105, 96, 94, 84, 72, 70, 74, 75, 77, 85, 91, 92, 90, 84, 72, 62, 54, 42, 42, 66, 99, 117, 120, 138, 170, 184, 178, 184, 205, 211, 192, 178, 182, 177, 150, 129, 130, 128, 108, 93, 99, 113, 117, 115, 124, 147, 167, 177, 183, 193, 203, 201, 182, 161, 150, 137, 114, 94, 91, 94, 86, 74, 74, 86, 91, 88, 88, 95, 100, 94, 82, 74, 71, 62, 50, 51, 77, 110, 126, 131, 150, 175, 183, 175, 177, 191, 192, 175, 162, 158, 149, 134, 123, 119, 114, 109, 111, 118, 127, 139, 151, 157, 163, 182, 201, 197, 180, 180, 190, 177, 140, 116, 112, 102, 77, 67, 80, 89, 81, 79, 95, 111, 110, 104, 107, 115, 113, 96, 76, 63, 55, 44, 37, 49, 81, 111, 125, 137, 162, 184, 187, 185, 196, 208, 198, 170, 153, 151, 145, 122, 99, 95, 103, 106, 103, 112, 139, 159, 160, 166, 193, 219, 216, 199, 201, 207, 182, 135, 109, 106, 95, 68, 52, 59, 68, 68, 70, 85, 101, 109, 108, 106, 110, 119, 118, 98, 75, 65, 59, 50, 53, 81, 113, 124, 131, 156, 183, 182, 168, 175, 195, 191, 163, 146, 145, 138, 115, 98, 99, 107, 109, 109, 116, 130, 143, 154, 166, 182, 196, 201, 199, 198, 193, 177, 150, 127, 112, 99, 83, 73, 75, 84, 92, 95, 96, 99, 105, 110, 110, 106, 102, 92, 72, 53, 43, 40, 39, 48, 74, 102, 119, 136, 164, 191, 198, 195, 196, 198, 189, 172, 157, 143, 127, 114, 101, 86, 78, 86, 101, 108, 114, 134, 157, 165, 169, 186, 201, 193, 175, 173, 177, 163, 136, 118, 114, 104, 90, 86, 95, 105, 111, 118, 127, 132, 129, 115, 98, 84, 77, 70, 58, 45, 38, 34, 32, 36, 55, 88, 123, 151, 170, 185, 202, 215, 214, 202, 190, 181, 165, 140, 115, 98, 85, 78, 79, 84, 90, 100, 118, 134, 142, 150, 169, 189, 200, 200, 196, 186, 170, 155, 140, 122, 106, 100, 99, 95, 94, 107, 123, 127, 124, 127, 130, 121, 105, 94, 81, 57, 39, 40, 48, 40, 24, 19, 31, 50, 77, 114, 151, 179, 202, 223, 233, 226, 212, 204, 195, 174, 141, 112, 96, 88, 79, 68, 65, 79, 104, 125, 139, 152, 169, 185, 196, 199, 198, 194, 184, 163, 135, 112, 102, 97, 88, 81, 90, 111, 125, 132, 140, 151, 156, 149, 137, 125, 114, 100, 81, 59, 40, 30, 24, 15, 5, 0, 4, 20, 54, 104, 150, 177, 198, 228, 251, 247, 223, 202, 188, 168, 141, 115, 94, 79, 76, 83, 89, 93, 109, 136, 158, 164, 167, 180, 191, 188, 175, 163, 152, 135, 116, 101, 94, 91, 94, 103, 117, 129, 137, 143, 151, 157, 156, 148, 141, 137, 129, 114, 97, 85, 76, 62, 46, 32, 25, 25, 27, 22, 15, 27, 69, 125, 167, 190, 208, 227, 239, 228, 197, 160, 136, 129, 122, 100, 75, 70, 87, 106, 114, 117, 131, 159, 188, 201, 191, 174, 167, 168, 157, 134, 117, 114, 111, 98, 87, 89, 100, 113, 126, 135, 138, 138, 144, 155, 159, 152, 145, 138, 122, 99, 80, 73, 68, 56, 47, 51, 59, 58, 47, 37, 28, 22, 31, 73, 135, 182, 195, 197, 214, 236, 231, 195, 159, 143, 136, 119, 97, 87, 91, 97, 100, 106, 122, 143, 162, 173, 175, 168, 159, 154, 151, 144, 129, 113, 104, 105, 107, 108, 110, 115, 124, 132, 138, 143, 148, 152, 156, 155, 145, 129, 117, 108, 96, 83, 73, 71, 72, 73, 78, 81, 74, 59, 50, 54, 60, 57, 51, 57, 86, 129, 170, 191, 187, 178, 183, 198, 192, 155, 110, 91, 100, 110, 103, 88, 85, 97, 119, 142, 159, 163, 156, 154, 165, 173, 161, 139, 129, 139, 147, 138, 119, 107, 107, 115, 125, 133, 136, 136, 141, 154, 165, 162, 147, 135, 128, 120, 104, 90, 88, 94, 93, 81, 67, 61, 66, 75, 78, 73, 64, 60, 65, 75, 80, 75, 62, 57, 83, 137, 189, 203, 182, 165, 176, 193, 181, 141, 109, 105, 114, 111, 98, 90, 94, 106, 123, 144, 158, 158, 150, 151, 163, 168, 156, 138, 129, 132, 136, 130, 115, 101, 102, 122, 149, 162, 156, 147, 149, 158, 159, 150, 143, 141, 137, 124, 106, 91, 79, 72, 72, 78, 83, 80, 72, 65, 65, 67, 72, 76, 76, 73, 70, 72, 74, 67, 51, 44, 64, 112, 169, 208, 212, 193, 179, 187, 201, 195, 166, 135, 121, 120, 117, 106, 93, 85, 88, 105, 134, 156, 160, 155, 155, 161, 158, 144, 135, 136, 138, 128, 116, 117, 127, 130, 122, 120, 133, 152, 160, 154, 142, 134, 134, 141, 146, 139, 121, 108, 106, 108, 99, 80, 64, 61, 66, 67, 62, 57, 58, 65, 72, 77, 82, 89, 96, 95, 86, 73, 64, 63, 73, 103, 148, 186, 196, 184, 179, 193, 206, 190, 153, 123, 116, 121, 119, 109, 102, 102, 114, 136, 160, 171, 165, 154, 152, 158, 160, 150, 133, 122, 120, 122, 123, 117, 106, 102, 110, 123, 132, 138, 148, 157, 155, 141, 131, 137, 147, 141, 120, 102, 97, 97, 90, 79, 78, 90, 104, 111, 107, 97, 85, 75, 70, 71, 79, 91, 100, 100, 90, 78, 72, 69, 63, 51, 41, 49, 85, 141, 193, 213, 199, 180, 181, 198, 204, 184, 149, 121, 111, 113, 117, 113, 101, 96, 112, 149, 180, 185, 169, 157, 158, 157, 142, 122, 109, 105, 101, 97, 96, 100, 106, 114, 128, 147, 162, 170, 174, 177, 175, 165, 150, 135, 120, 104, 91, 87, 92, 99, 102, 103, 103, 104, 105, 101, 94, 86, 83, 83, 82, 79, 77, 83, 90, 93, 91, 86, 82, 78, 74, 66, 50, 30, 28, 65, 138, 207, 235, 221, 197, 193, 205, 209, 189, 149, 112, 95, 98, 106, 107, 101, 102, 116, 137, 155, 166, 170, 165, 155, 147, 146, 146, 138, 123, 110, 105, 104, 103, 105, 111, 115, 120, 133, 157, 179, 181, 163, 145, 143, 152, 156, 144, 123, 109, 105, 107, 107, 105, 104, 103, 100, 94, 90, 92, 96, 97, 94, 89, 84, 79, 72, 70, 75, 83, 86, 82, 73, 62, 54, 52, 55, 61, 70, 95, 139, 191, 223, 224, 207, 194, 192, 193, 183, 163, 139, 121, 116, 125, 135, 136, 125, 116, 117, 127, 139, 148, 155, 158, 154, 146, 138, 132, 126, 115, 101, 89, 88, 96, 106, 109, 105, 104, 117, 143, 167, 176, 169, 158, 155, 163, 174, 173, 154, 126, 102, 94, 100, 110, 118, 123, 124, 120, 111, 101, 93, 86, 81, 78, 78, 76, 71, 65, 63, 68, 80, 93, 99, 95, 85, 78, 81, 89, 92, 88, 88, 109, 153, 201, 228, 221, 194, 174, 177, 187, 178, 143, 104, 89, 104, 126, 130, 117, 105, 115, 142, 167, 171, 152, 130, 124, 137, 154, 158, 144, 124, 111, 107, 106, 101, 95, 95, 108, 130, 153, 169, 172, 165, 152, 138, 132, 133, 137, 136, 130, 124, 124, 127, 126, 118, 107, 104, 110, 121, 125, 120, 113, 113, 118, 120, 111, 94, 80, 78, 83, 88, 88, 85, 83, 84, 84, 84, 86, 93, 103, 104, 93, 78, 84, 124, 183, 230, 237, 208, 170, 152, 156, 161, 144, 107, 73, 65, 87, 119, 141, 147, 147, 152, 161, 167, 161, 147, 135, 133, 138, 140, 136, 125, 113, 107, 109, 115, 118, 117, 111, 109, 116, 133, 153, 166, 167, 159, 149, 144, 142, 138, 129, 118, 112, 112, 115, 117, 116, 117, 125, 139, 150, 150, 138, 122, 110, 105, 102, 97, 91, 88, 90, 96, 101, 102, 98, 96, 97, 100, 101, 99, 95, 96, 103, 111, 110, 96, 77, 72, 92, 137, 188, 218, 217, 194, 171, 162, 162, 156, 130, 95, 70, 70, 93, 122, 140, 141, 139, 145, 156, 164, 158, 140, 121, 111, 113, 115, 110, 102, 100, 112, 140, 170, 185, 180, 160, 138, 122, 117, 120, 124, 129, 137, 144, 146, 143, 137, 133, 135, 142, 146, 143, 137, 133, 131, 128, 120, 107, 97, 99, 112, 122, 121, 108, 95, 92, 103, 116, 119, 113, 107, 107, 110, 110, 104, 95, 93, 99, 104, 101, 91, 81, 75, 73, 68, 63, 73, 113, 177, 235, 255, 231, 179, 134, 118, 120, 121, 112, 103, 107, 130, 157, 167, 156, 137, 128, 133, 141, 143, 135, 126, 126, 135, 140, 136, 129, 125, 131, 142, 149, 141, 124, 112, 109, 117, 130, 137, 132, 120, 111, 110, 120, 140, 157, 162, 154, 143, 135, 134, 136, 135, 128, 121, 122, 129, 135, 135, 128, 118, 115, 121, 127, 126, 119, 112, 109, 112, 117, 114, 104, 95, 90, 87, 87, 87, 84, 80, 80, 84, 88, 94, 100, 98, 91, 89, 100, 129, 170, 208, 223, 214, 192, 169, 148, 130, 111, 93, 89, 105, 132, 157, 171, 177, 180, 183, 181, 164, 133, 105, 93, 95, 100, 99, 92, 92, 111, 142, 163, 164, 150, 131, 118, 113, 109, 101, 97, 106, 121, 130, 130, 125, 126, 144, 172, 188, 179, 154, 127, 110, 106, 107, 105, 103, 113, 130, 145, 152, 150, 142, 135, 135, 134, 125, 115, 107, 101, 99, 101, 102, 100, 99, 97, 94, 93, 98, 104, 103, 98, 92, 91, 101, 117, 122, 110, 96, 99, 127, 173, 212, 219, 191, 153, 126, 115, 114, 112, 106, 102, 114, 139, 160, 169, 167, 159, 152, 151, 147, 132, 113, 100, 99, 107, 120, 128, 127, 125, 131, 141, 149, 153, 147, 132, 118, 110, 106, 106, 111, 118, 124, 130, 136, 139, 142, 148, 154, 152, 145, 134, 121, 116, 121, 130, 132, 130, 125, 122, 123, 129, 133, 131, 127, 125, 122, 121, 122, 119, 114, 111, 113, 113, 114, 114, 109, 98, 90, 86, 86, 90, 94, 95, 92, 92, 94, 92, 88, 89, 101, 128, 168, 203, 213, 198, 172, 149, 137, 135, 128, 112, 98, 103, 125, 154, 174, 173, 154, 139, 139, 147, 153, 147, 128, 104, 94, 102, 117, 130, 138, 139, 136, 136, 138, 134, 124, 115, 109, 108, 115, 125, 128, 127, 128, 129, 132, 136, 137, 132, 128, 131, 138, 145, 150, 150, 145, 140, 139, 136, 129, 123, 122, 122, 124, 125, 118, 106, 100, 107, 119, 132, 139, 131, 115, 104, 102, 107, 114, 119, 113, 102, 95, 93, 93, 92, 91, 88, 90, 102, 113, 110, 97, 88, 99, 136, 189, 225, 219, 183, 142, 121, 125, 138, 136, 113, 94, 101, 131, 169, 192, 188, 165, 148, 143, 142, 134, 120, 105, 97, 104, 119, 129, 134, 138, 140, 139, 137, 130, 119, 111, 110, 114, 121, 131, 137, 136, 133, 131, 131, 131, 131, 124, 113, 106, 113, 128, 145, 155, 155, 147, 141, 139, 135, 125, 116, 112, 116, 126, 135, 134, 123, 114, 111, 113, 118, 123, 123, 119, 114, 110, 106, 107, 114, 118, 117, 112, 106, 99, 94, 90, 84, 81, 89, 103, 110, 106, 99, 101, 127, 178, 222, 231, 202, 156, 117, 104, 115, 126, 125, 124, 135, 151, 167, 171, 157, 134, 123, 125, 127, 123, 117, 109, 106, 116, 130, 137, 142, 146, 144, 136, 130, 122, 115, 115, 118, 116, 114, 119, 126, 132, 138, 141, 139, 138, 138, 131, 119, 114, 122, 137, 153, 159, 148, 133, 130, 138, 145, 143, 129, 110, 103, 112, 124, 129, 123, 111, 103, 102, 108, 114, 119, 123, 124, 121, 114, 107, 105, 109, 113, 114, 111, 104, 99, 97, 95, 89, 88, 94, 100, 102, 98, 92, 101, 139, 195, 237, 242, 210, 155, 111, 101, 112, 121, 124, 125, 127, 142, 164, 173, 159, 139, 124, 118, 122, 129, 126, 117, 116, 123, 130, 136, 141, 138, 137, 142, 143, 132, 118, 107, 101, 107, 123, 133, 132, 129, 127, 126, 132, 140, 141, 137, 135, 135, 135, 138, 142, 139, 133, 129, 126, 124, 128, 134, 134, 128, 119, 110, 105, 108, 114, 115, 113, 112, 115, 119, 123, 121, 114, 107, 106, 110, 114, 112, 105, 98, 95, 100, 110, 116, 118, 116, 113, 113, 116, 117, 110, 95, 80, 79, 102, 150, 204, 237, 234, 202, 159, 129, 124, 132, 135, 127, 116, 113, 127, 153, 170, 168, 150, 133, 124, 128, 139, 144, 135, 122, 113, 112, 121, 134, 140, 135, 127, 121, 119, 121, 122, 116, 105, 101, 108, 122, 136, 142, 138, 129, 128, 136, 144, 147, 144, 136, 127, 124, 126, 129, 132, 136, 133, 123, 114, 111, 114, 123, 130, 125, 111, 102, 102, 109, 116, 119, 112, 106, 109, 118, 122, 120, 115, 109, 107, 112, 113, 105, 99, 99, 102, 109, 117, 119, 118, 121, 121, 111, 97, 88, 90, 110, 145, 177, 196, 204, 202, 189, 171, 152, 133, 122, 125, 134, 136, 132, 128, 128, 137, 153, 159, 153, 140, 129, 126, 133, 140, 139, 131, 123, 119, 120, 125, 128, 125, 123, 120, 116, 115, 115, 114, 115, 119, 123, 126, 131, 136, 136, 135, 134, 129, 128, 136, 147, 154, 157, 152, 137, 123, 117, 114, 113, 119, 124, 126, 131, 139, 138, 132, 125, 112, 99, 98, 107, 114, 122, 126, 116, 103, 102, 106, 110, 118, 122, 115, 109, 111, 112, 110, 110, 109, 104, 108, 116, 117, 113, 112, 108, 103, 104, 103, 99, 107, 133, 165, 193, 213, 210, 187, 164, 146, 130, 124, 126, 125, 125, 131, 137, 139, 147, 156, 156, 151, 145, 134, 124, 126, 129, 125, 122, 118, 112, 112, 122, 128, 131, 133, 129, 120, 117, 121, 124, 128, 132, 126, 115, 114, 120, 127, 135, 140, 133, 127, 134, 142, 147, 147, 139, 123, 116, 122, 129, 136, 143, 142, 133, 128, 125, 119, 118, 121, 117, 107, 102, 100, 102, 114, 127, 126, 116, 110, 106, 108, 118, 123, 115, 108, 109, 110, 116, 125, 124, 116, 110, 107, 102, 103, 109, 110, 107, 106, 102, 99, 110, 132, 155, 175, 189, 186, 175, 165, 157, 148, 146, 148, 146, 146, 148, 145, 141, 144, 150, 154, 159, 159, 146, 130, 119, 113, 114, 125, 135, 135, 131, 127, 123, 124, 131, 132, 125, 116, 109, 106, 113, 124, 127, 125, 123, 122, 121, 124, 125, 122, 123, 131, 140, 144, 144, 136, 127, 128, 137, 142, 139, 129, 113, 99, 97, 104, 111, 119, 125, 126, 124, 122, 117, 112, 111, 111, 111, 112, 115, 117, 119, 123, 123, 121, 121, 122, 123, 123, 121, 116, 114, 116, 120, 121, 119, 114, 108, 106, 108, 108, 106, 104, 107, 118, 136, 153, 160, 154, 142, 131, 131, 146, 166, 182, 185, 174, 154, 138, 133, 138, 148, 153, 149, 138, 127, 122, 125, 133, 142, 146, 143, 135, 126, 121, 122, 128, 134, 136, 130, 120, 114, 114, 121, 128, 130, 125, 117, 113, 115, 123, 132, 137, 137, 134, 131, 129, 131, 136, 140, 142, 140, 133, 123, 118, 119, 124, 129, 130, 123, 114, 111, 114, 120, 127, 129, 123, 117, 116, 118, 122, 127, 127, 119, 112, 106, 103, 106, 115, 122, 126, 129, 128, 123, 118, 115, 111, 110, 114, 119, 121, 123, 121, 113, 108, 107, 104, 102, 100, 98, 101, 116, 141, 167, 187, 195, 185, 165, 149, 140, 140, 149, 157, 155, 146, 136, 126, 122, 127, 136, 141, 147, 150, 145, 138, 134, 130, 127, 131, 133, 127, 119, 110, 103, 103, 114, 123, 127, 128, 126, 122, 124, 132, 136, 136, 134, 127, 118, 117, 122, 127, 136, 146, 147, 143, 138, 131, 124, 127, 134, 137, 138, 136, 126, 116, 113, 114, 116, 120, 123, 118, 113, 112, 111, 113, 120, 126, 126, 125, 123, 115, 107, 104, 102, 103, 111, 119, 121, 122, 123, 118, 114, 115, 115, 112, 113, 114, 111, 109, 108, 103, 100, 106, 118, 136, 160, 180, 185, 180, 169, 153, 143, 145, 153, 158, 161, 156, 143, 130, 125, 124, 128, 139, 148, 149, 146, 142, 133, 128, 130, 133, 132, 132, 127, 117, 109, 108, 110, 115, 124, 128, 127, 127, 127, 125, 126, 129, 129, 127, 127, 125, 122, 121, 123, 125, 130, 138, 141, 140, 138, 134, 129, 129, 131, 128, 124, 121, 117, 114, 117, 118, 116, 114, 114, 113, 116, 122, 125, 124, 123, 121, 117, 115, 114, 112, 109, 108, 107, 107, 111, 116, 120, 124, 127, 126, 123, 120, 117, 113, 111, 112, 110, 108, 108, 106, 107, 112, 122, 132, 145, 158, 165, 169, 171, 167, 159, 153, 149, 146, 147, 149, 148, 143, 138, 131, 126, 126, 130, 136, 144, 148, 147, 142, 137, 133, 131, 131, 131, 127, 122, 117, 112, 111, 113, 118, 122, 125, 126, 124, 122, 122, 125, 129, 133, 132, 128, 122, 118, 117, 119, 122, 124, 125, 126, 128, 131, 133, 134, 134, 133, 132, 131, 129, 127, 124, 123, 123, 124, 124, 124, 123, 122, 122, 124, 126, 127, 127, 125, 122, 120, 119, 118, 117, 116, 114, 113, 113, 114, 116, 118, 119, 119, 120, 119, 119, 119, 119, 120, 120, 120, 118, 114, 112, 113, 118, 128, 139, 148, 153, 153, 151, 148, 148, 150, 154, 157, 158, 154, 147, 140, 134, 132, 134, 137, 139, 139, 138, 136, 135, 135, 136, 137, 138, 137, 133, 127, 121, 115, 112, 113, 115, 118, 121, 124, 124, 123, 122, 121, 122, 125, 128, 129, 128, 125, 121, 118, 118, 121, 123, 126, 127, 126, 126, 127, 128, 131, 133, 134, 133, 131, 128, 125, 123, 122, 123, 123, 124, 123, 122, 121, 120, 120, 121, 122, 122, 121, 120, 119, 119, 120, 121, 122, 122, 121, 121, 121, 122, 123, 123, 123, 122, 121, 121, 121, 121, 122, 122, 122, 123, 124, 127, 132, 136, 139, 140, 140, 139, 138, 140, 143, 146, 150, 151, 151, 150, 148, 147, 145, 145, 144, 144, 144, 143, 141, 139, 136, 134, 132, 130, 129, 128, 127, 125, 123, 122, 121, 121, 120, 120, 119, 119, 120, 121, 122, 121, 120, 118, 116, 115, 117, 119, 122, 124, 125, 126, 126, 125, 125, 125, 124, 123, 123, 122, 123, 124, 125, 126, 126, 125, 123, 122, 122, 122, 123, 124, 124, 123, 123, 122, 121, 121, 122, 122, 123, 123, 124, 123, 123, 122, 122, 123, 124, 124, 124, 123, 122, 121, 121, 123, 126, 128, 129, 128, 126, 125, 126, 128, 130, 132, 132, 130, 127, 126, 126, 128, 129, 130, 130, 130, 130, 130, 130, 131, 132, 132, 134, 135, 136, 136, 136, 135, 134, 134, 135, 136, 138, 138, 138, 137, 135, 134, 133, 133, 135, 137, 139, 140, 139, 135, 131, 127, 126, 127, 128, 130, 129, 126, 123, 120, 119, 119, 120, 120, 120, 119, 118, 118, 118, 119, 120, 120, 120, 120, 120, 120, 120, 121, 121, 122, 123, 123, 122, 121, 120, 119, 119, 119, 119, 118, 118, 117, 117, 117, 118, 119, 119, 119, 119, 119, 119, 120, 121, 121, 122, 122, 123, 124, 125, 124, 124, 123, 123, 125, 127, 128, 128, 128, 126, 124, 124, 125, 127, 128, 130, 131, 130, 129, 128, 127, 127, 128, 129, 130, 131, 132, 132, 132, 132, 132, 133, 133, 133, 134, 134, 135, 136, 137, 138, 139, 139, 139, 139, 138, 138, 137, 136, 135, 133, 132, 131, 130, 129, 129, 128, 128, 127, 127, 126, 125, 124, 123, 122, 121, 120, 120, 119, 119, 119, 120, 119, 119, 120, 121, 122, 123, 124, 125, 125, 126, 127, 126, 126, 125, 123, 122, 121, 121, 121, 121, 121, 119, 118, 117, 117, 117, 119, 120, 121, 122, 122, 122, 122, 122, 121, 121, 121, 122, 124, 125, 126, 126, 124, 124, 124, 124, 127, 129, 129, 129, 128, 127, 125, 125, 127, 127, 129, 129, 129, 127, 127, 127, 128, 129, 130, 130, 131, 131, 130, 130, 130, 131, 132, 132, 133, 133, 132, 133, 134, 134, 134, 135, 134, 134, 134, 134, 133, 134, 134, 133, 133, 132, 131, 131, 130, 129, 129, 128, 128, 128, 128, 126, 125, 124, 123, 123, 123, 123, 123, 123, 122, 121, 121, 121, 122, 124, 125, 125, 126, 126, 127, 128, 128, 128, 127, 125, 124, 124, 123, 123, 124, 124, 123, 122, 121, 121, 122, 123, 123, 124, 124, 123, 122, 122, 123, 124, 124, 125, 126, 125, 125, 125, 125, 126, 127, 127, 127, 127, 127, 127, 127, 127, 128, 129, 130, 130, 129, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 129, 130, 130, 130, 129, 129, 129, 129, 129, 129, 129, 130, 130, 130, 130, 130, 129, 129, 129, 128, 127, 127, 127, 128, 128, 128, 128, 127, 126, 125, 125, 125, 125, 127, 127, 128, 128, 129, 129, 130, 130, 130, 130, 130, 129, 128, 128, 128, 128, 128, 129, 128, 128, 127, 126, 126, 125, 125, 125, 126, 126, 126, 125, 124, 123, 123, 123, 124, 125, 126, 126, 125, 124, 124, 125, 125, 127, 127, 127, 127, 126, 126, 126, 126, 127, 128, 128, 128, 128, 127, 126, 126, 127, 127, 128, 128, 128, 128, 128, 127, 126, 126, 127, 127, 127, 128, 128, 128, 128, 128, 129, 129, 129, 129, 129, 129, 128, 129, 129, 129, 129, 129, 129, 128, 128, 128, 128, 129, 129, 129, 129, 128, 128, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 128, 128, 128, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 128, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 128, 128, 128, 128, 128, 127, 127, 127, 127, 128, 128, 128, 128, 127, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 127, 127, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
};

// We default to using software serial. If you want to use hardware serial
// (because softserial isnt supported) comment out the following three lines 
// and uncomment the HardwareSerial line
#include <SoftwareSerial.h>
SoftwareSerial fonaSS = SoftwareSerial(FONA_TX, FONA_RX);
SoftwareSerial *fonaSerial = &fonaSS;

// Hardware serial is also possible!
//  HardwareSerial *fonaSerial = &Serial1;

// Use this for FONA 800 and 808s
Adafruit_FONA fona = Adafruit_FONA(FONA_RST);
// Use this one for FONA 3G
//Adafruit_FONA_3G fona = Adafruit_FONA_3G(FONA_RST);

uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout = 0);

uint8_t type;

void setup() {
  while (!Serial);

  Serial.begin(115200);
  Serial.println(F("FONA basic test"));
  Serial.println(F("Initializing....(May take 3 seconds)"));

  fonaSerial->begin(4800);
  if (! fona.begin(*fonaSerial)) {
    Serial.println(F("Couldn't find FONA"));
    while (1);
  }
  type = fona.type();
  Serial.println(F("FONA is OK"));
  Serial.print(F("Found "));
  switch (type) {
    case FONA800L:
      Serial.println(F("FONA 800L")); break;
    case FONA800H:
      Serial.println(F("FONA 800H")); break;
    case FONA808_V1:
      Serial.println(F("FONA 808 (v1)")); break;
    case FONA808_V2:
      Serial.println(F("FONA 808 (v2)")); break;
    case FONA3G_A:
      Serial.println(F("FONA 3G (American)")); break;
    case FONA3G_E:
      Serial.println(F("FONA 3G (European)")); break;
    default: 
      Serial.println(F("???")); break;
  }
  
  // Print module IMEI number.
  char imei[15] = {0}; // MUST use a 16 character buffer for IMEI!
  uint8_t imeiLen = fona.getIMEI(imei);
  if (imeiLen > 0) {
    Serial.print("Module IMEI: "); Serial.println(imei);
  }

  // Optionally configure a GPRS APN, username, and password.
  // You might need to do this to access your network's GPRS/data
  // network.  Contact your provider for the exact APN, username,
  // and password values.  Username and password are optional and
  // can be removed, but APN is required.
  //fona.setGPRSNetworkSettings(F("your APN"), F("your username"), F("your password"));

  // Optionally configure HTTP gets to follow redirects over SSL.
  // Default is not to follow SSL redirects, however if you uncomment
  // the following line then redirects over SSL will be followed.
  //fona.setHTTPSRedirect(true);

  printMenu();
}

void printMenu(void) {
  Serial.println(F("-------------------------------------"));
  Serial.println(F("[?] Print this menu"));
  Serial.println(F("[a] read the ADC 2.8V max (FONA800 & 808)"));
  Serial.println(F("[b] read the Battery V and % charged"));
  Serial.println(F("[C] read the SIM CCID"));
  Serial.println(F("[U] Unlock SIM with PIN code"));
  Serial.println(F("[i] read RSSI"));
  Serial.println(F("[n] get Network status"));
  Serial.println(F("[v] set audio Volume"));
  Serial.println(F("[V] get Volume"));
  Serial.println(F("[H] set Headphone audio (FONA800 & 808)"));
  Serial.println(F("[e] set External audio (FONA800 & 808)"));
  Serial.println(F("[T] play audio Tone"));
  Serial.println(F("[P] PWM/Buzzer out (FONA800 & 808)"));

  // FM (SIM800 only!)
  Serial.println(F("[f] tune FM radio (FONA800)"));
  Serial.println(F("[F] turn off FM (FONA800)"));
  Serial.println(F("[m] set FM volume (FONA800)"));
  Serial.println(F("[M] get FM volume (FONA800)"));
  Serial.println(F("[q] get FM station signal level (FONA800)"));

  // Phone
  Serial.println(F("[c] make phone Call"));
  Serial.println(F("[A] get call status"));
  Serial.println(F("[h] Hang up phone"));
  Serial.println(F("[p] Pick up phone"));

  // SMS
  Serial.println(F("[N] Number of SMSs"));
  Serial.println(F("[r] Read SMS #"));
  Serial.println(F("[R] Read All SMS"));
  Serial.println(F("[d] Delete SMS #"));
  Serial.println(F("[s] Send SMS"));
  Serial.println(F("[u] Send USSD"));
  
  // Time
  Serial.println(F("[y] Enable network time sync (FONA 800 & 808)"));
  Serial.println(F("[Y] Enable NTP time sync (GPRS FONA 800 & 808)"));
  Serial.println(F("[t] Get network time"));

  // GPRS
  Serial.println(F("[G] Enable GPRS"));
  Serial.println(F("[g] Disable GPRS"));
  Serial.println(F("[l] Query GSMLOC (GPRS)"));
  Serial.println(F("[w] Read webpage (GPRS)"));
  Serial.println(F("[W] Post to website (GPRS)"));

  // GPS
  if ((type == FONA3G_A) || (type == FONA3G_E) || (type == FONA808_V1) || (type == FONA808_V2)) {
    Serial.println(F("[O] Turn GPS on (FONA 808 & 3G)"));
    Serial.println(F("[o] Turn GPS off (FONA 808 & 3G)"));
    Serial.println(F("[L] Query GPS location (FONA 808 & 3G)"));
    if (type == FONA808_V1) {
      Serial.println(F("[x] GPS fix status (FONA808 v1 only)"));
    }
    Serial.println(F("[E] Raw NMEA out (FONA808)"));
  }
  
  Serial.println(F("[S] create Serial passthru tunnel"));
  Serial.println(F("-------------------------------------"));
  Serial.println(F(""));

}
void loop() {
  Serial.print(F("FONA> "));
  while (! Serial.available() ) {
    if (fona.available()) {
      Serial.write(fona.read());
    }
  }

  char command = Serial.read();
  Serial.println(command);


  switch (command) {
    case '?': {
        printMenu();
        break;
      }

    case 'a': {
        // read the ADC
        uint16_t adc;
        if (! fona.getADCVoltage(&adc)) {
          Serial.println(F("Failed to read ADC"));
        } else {
          Serial.print(F("ADC = ")); Serial.print(adc); Serial.println(F(" mV"));
        }
        break;
      }

    case 'b': {
        // read the battery voltage and percentage
        uint16_t vbat;
        if (! fona.getBattVoltage(&vbat)) {
          Serial.println(F("Failed to read Batt"));
        } else {
          Serial.print(F("VBat = ")); Serial.print(vbat); Serial.println(F(" mV"));
        }


        if (! fona.getBattPercent(&vbat)) {
          Serial.println(F("Failed to read Batt"));
        } else {
          Serial.print(F("VPct = ")); Serial.print(vbat); Serial.println(F("%"));
        }

        break;
      }

    case 'U': {
        // Unlock the SIM with a PIN code
        char PIN[5];
        flushSerial();
        Serial.println(F("Enter 4-digit PIN"));
        readline(PIN, 3);
        Serial.println(PIN);
        Serial.print(F("Unlocking SIM card: "));
        if (! fona.unlockSIM(PIN)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }

    case 'C': {
        // read the CCID
        fona.getSIMCCID(replybuffer);  // make sure replybuffer is at least 21 bytes!
        Serial.print(F("SIM CCID = ")); Serial.println(replybuffer);
        break;
      }

    case 'i': {
        // read the RSSI
        uint8_t n = fona.getRSSI();
        int8_t r;

        Serial.print(F("RSSI = ")); Serial.print(n); Serial.print(": ");
        if (n == 0) r = -115;
        if (n == 1) r = -111;
        if (n == 31) r = -52;
        if ((n >= 2) && (n <= 30)) {
          r = map(n, 2, 30, -110, -54);
        }
        Serial.print(r); Serial.println(F(" dBm"));

        break;
      }

    case 'n': {
        // read the network/cellular status
        uint8_t n = fona.getNetworkStatus();
        Serial.print(F("Network status "));
        Serial.print(n);
        Serial.print(F(": "));
        if (n == 0) Serial.println(F("Not registered"));
        if (n == 1) Serial.println(F("Registered (home)"));
        if (n == 2) Serial.println(F("Not registered (searching)"));
        if (n == 3) Serial.println(F("Denied"));
        if (n == 4) Serial.println(F("Unknown"));
        if (n == 5) Serial.println(F("Registered roaming"));
        break;
      }

    /*** Audio ***/
    case 'v': {
        // set volume
        flushSerial();
        if ( (type == FONA3G_A) || (type == FONA3G_E) ) {
          Serial.print(F("Set Vol [0-8] "));
        } else {
          Serial.print(F("Set Vol % [0-100] "));
        }
        uint8_t vol = readnumber();
        Serial.println();
        if (! fona.setVolume(vol)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }

    case 'V': {
        uint8_t v = fona.getVolume();
        Serial.print(v);
        if ( (type == FONA3G_A) || (type == FONA3G_E) ) {
          Serial.println(" / 8");
        } else {
          Serial.println("%");
        }
        break;
      }

    case 'H': {
        // Set Headphone output
        if (! fona.setAudio(FONA_HEADSETAUDIO)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        fona.setMicVolume(FONA_HEADSETAUDIO, 15);
        break;
      }
    case 'e': {
        // Set External output
        if (! fona.setAudio(FONA_EXTAUDIO)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }

        fona.setMicVolume(FONA_EXTAUDIO, 10);
        break;
      }

    case 'T': {
        // play tone
        flushSerial();
        Serial.print(F("Play tone #"));
        uint8_t kittone = readnumber();
        Serial.println();
        // play for 1 second (1000 ms)
        if (! fona.playToolkitTone(kittone, 1000)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }

    /*** FM Radio ***/

    case 'f': {
        // get freq
        flushSerial();
        Serial.print(F("FM Freq (eg 1011 == 101.1 MHz): "));
        uint16_t station = readnumber();
        Serial.println();
        // FM radio ON using headset
        if (fona.FMradio(true, FONA_HEADSETAUDIO)) {
          Serial.println(F("Opened"));
        }
        if (! fona.tuneFMradio(station)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("Tuned"));
        }
        break;
      }
    case 'F': {
        // FM radio off
        if (! fona.FMradio(false)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }
    case 'm': {
        // Set FM volume.
        flushSerial();
        Serial.print(F("Set FM Vol [0-6]:"));
        uint8_t vol = readnumber();
        Serial.println();
        if (!fona.setFMVolume(vol)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }
    case 'M': {
        // Get FM volume.
        uint8_t fmvol = fona.getFMVolume();
        if (fmvol < 0) {
          Serial.println(F("Failed"));
        } else {
          Serial.print(F("FM volume: "));
          Serial.println(fmvol, DEC);
        }
        break;
      }
    case 'q': {
        // Get FM station signal level (in decibels).
        flushSerial();
        Serial.print(F("FM Freq (eg 1011 == 101.1 MHz): "));
        uint16_t station = readnumber();
        Serial.println();
        int8_t level = fona.getFMSignalLevel(station);
        if (level < 0) {
          Serial.println(F("Failed! Make sure FM radio is on (tuned to station)."));
        } else {
          Serial.print(F("Signal level (dB): "));
          Serial.println(level, DEC);
        }
        break;
      }

    /*** PWM ***/

    case 'P': {
        // PWM Buzzer output @ 2KHz max
        flushSerial();
        Serial.print(F("PWM Freq, 0 = Off, (1-2000): "));
        uint16_t freq = readnumber();
        Serial.println();
        if (! fona.setPWM(freq)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }

    /*** Call ***/
    case 'c': {
        // call a phone!
        char number[30];
        flushSerial();
        Serial.print(F("Call #"));
        readline(number, 30);
        Serial.println();
        Serial.print(F("Calling ")); Serial.println(number);
        if (!fona.callPhone(number)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("Sent!"));
        }

        break;
      }
    case 'A': {
        // get call status
        int8_t callstat = fona.getCallStatus();
        switch (callstat) {
          case 0: Serial.println(F("Ready")); break;
          case 1: Serial.println(F("Could not get status")); break;
          case 3: Serial.println(F("Ringing (incoming)")); break;
          case 4: 
          Serial.println(F("Ringing/in progress (outgoing)"));
            startPlayback(zero, sizeof(zero));
            delay(1000);
            stopPlayback();
          break;
          default: Serial.println(F("Unknown")); break;
        }
        break;
      }
      
    case 'h': {
        // hang up!
        if (! fona.hangUp()) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }

    case 'p': {
        // pick up!
        if (! fona.pickUp()) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("OK!"));
        }
        break;
      }

    /*** SMS ***/

    case 'N': {
        // read the number of SMS's!
        int8_t smsnum = fona.getNumSMS();
        if (smsnum < 0) {
          Serial.println(F("Could not read # SMS"));
        } else {
          Serial.print(smsnum);
          Serial.println(F(" SMS's on SIM card!"));
        }
        break;
      }
    case 'r': {
        // read an SMS
        flushSerial();
        Serial.print(F("Read #"));
        uint8_t smsn = readnumber();
        Serial.print(F("\n\rReading SMS #")); Serial.println(smsn);

        // Retrieve SMS sender address/phone number.
        if (! fona.getSMSSender(smsn, replybuffer, 250)) {
          Serial.println("Failed!");
          break;
        }
        Serial.print(F("FROM: ")); Serial.println(replybuffer);

        // Retrieve SMS value.
        uint16_t smslen;
        if (! fona.readSMS(smsn, replybuffer, 250, &smslen)) { // pass in buffer and max len!
          Serial.println("Failed!");
          break;
        }
        Serial.print(F("***** SMS #")); Serial.print(smsn);
        Serial.print(" ("); Serial.print(smslen); Serial.println(F(") bytes *****"));
        Serial.println(replybuffer);
        Serial.println(F("*****"));

        break;
      }
    case 'R': {
        // read all SMS
        int8_t smsnum = fona.getNumSMS();
        uint16_t smslen;
        int8_t smsn;

        if ( (type == FONA3G_A) || (type == FONA3G_E) ) {
          smsn = 0; // zero indexed
          smsnum--;
        } else {
          smsn = 1;  // 1 indexed
        }

        for ( ; smsn <= smsnum; smsn++) {
          Serial.print(F("\n\rReading SMS #")); Serial.println(smsn);
          if (!fona.readSMS(smsn, replybuffer, 250, &smslen)) {  // pass in buffer and max len!
            Serial.println(F("Failed!"));
            break;
          }
          // if the length is zero, its a special case where the index number is higher
          // so increase the max we'll look at!
          if (smslen == 0) {
            Serial.println(F("[empty slot]"));
            smsnum++;
            continue;
          }

          Serial.print(F("***** SMS #")); Serial.print(smsn);
          Serial.print(" ("); Serial.print(smslen); Serial.println(F(") bytes *****"));
          Serial.println(replybuffer);
          Serial.println(F("*****"));
        }
        break;
      }

    case 'd': {
        // delete an SMS
        flushSerial();
        Serial.print(F("Delete #"));
        uint8_t smsn = readnumber();

        Serial.print(F("\n\rDeleting SMS #")); Serial.println(smsn);
        if (fona.deleteSMS(smsn)) {
          Serial.println(F("OK!"));
        } else {
          Serial.println(F("Couldn't delete"));
        }
        break;
      }

    case 's': {
        // send an SMS!
        char sendto[21], message[141];
        flushSerial();
        Serial.print(F("Send to #"));
        readline(sendto, 20);
        Serial.println(sendto);
        Serial.print(F("Type out one-line message (140 char): "));
        readline(message, 140);
        Serial.println(message);
        if (!fona.sendSMS(sendto, message)) {
          Serial.println(F("Failed"));
        } else {
          Serial.println(F("Sent!"));
        }

        break;
      }

    case 'u': {
      // send a USSD!
      char message[141];
      flushSerial();
      Serial.print(F("Type out one-line message (140 char): "));
      readline(message, 140);
      Serial.println(message);

      uint16_t ussdlen;
      if (!fona.sendUSSD(message, replybuffer, 250, &ussdlen)) { // pass in buffer and max len!
        Serial.println(F("Failed"));
      } else {
        Serial.println(F("Sent!"));
        Serial.print(F("***** USSD Reply"));
        Serial.print(" ("); Serial.print(ussdlen); Serial.println(F(") bytes *****"));
        Serial.println(replybuffer);
        Serial.println(F("*****"));
      }
    }

    /*** Time ***/

    case 'y': {
        // enable network time sync
        if (!fona.enableNetworkTimeSync(true))
          Serial.println(F("Failed to enable"));
        break;
      }

    case 'Y': {
        // enable NTP time sync
        if (!fona.enableNTPTimeSync(true, F("pool.ntp.org")))
          Serial.println(F("Failed to enable"));
        break;
      }

    case 't': {
        // read the time
        char buffer[23];

        fona.getTime(buffer, 23);  // make sure replybuffer is at least 23 bytes!
        Serial.print(F("Time = ")); Serial.println(buffer);
        break;
      }


    /*********************************** GPS (SIM808 only) */

    case 'o': {
        // turn GPS off
        if (!fona.enableGPS(false))
          Serial.println(F("Failed to turn off"));
        break;
      }
    case 'O': {
        // turn GPS on
        if (!fona.enableGPS(true))
          Serial.println(F("Failed to turn on"));
        break;
      }
    case 'x': {
        int8_t stat;
        // check GPS fix
        stat = fona.GPSstatus();
        if (stat < 0)
          Serial.println(F("Failed to query"));
        if (stat == 0) Serial.println(F("GPS off"));
        if (stat == 1) Serial.println(F("No fix"));
        if (stat == 2) Serial.println(F("2D fix"));
        if (stat == 3) Serial.println(F("3D fix"));
        break;
      }

    case 'L': {
        // check for GPS location
        char gpsdata[120];
        fona.getGPS(0, gpsdata, 120);
        if (type == FONA808_V1)
          Serial.println(F("Reply in format: mode,longitude,latitude,altitude,utctime(yyyymmddHHMMSS),ttff,satellites,speed,course"));
        else 
        
          Serial.println(F("Reply in format: mode,fixstatus,utctime(yyyymmddHHMMSS),latitude,longitude,altitude,speed,course,fixmode,reserved1,HDOP,PDOP,VDOP,reserved2,view_satellites,used_satellites,reserved3,C/N0max,HPA,VPA"));
        Serial.println(gpsdata);

        break;
      }

    case 'E': {
        flushSerial();
        if (type == FONA808_V1) {
          Serial.print(F("GPS NMEA output sentences (0 = off, 34 = RMC+GGA, 255 = all)"));
        } else {
          Serial.print(F("On (1) or Off (0)? "));
        }
        uint8_t nmeaout = readnumber();

        // turn on NMEA output
        fona.enableGPSNMEA(nmeaout);

        break;
      }

    /*********************************** GPRS */

    case 'g': {
        // turn GPRS off
        if (!fona.enableGPRS(false))
          Serial.println(F("Failed to turn off"));
        break;
      }
    case 'G': {
        // turn GPRS on
        if (!fona.enableGPRS(true))
          Serial.println(F("Failed to turn on"));
        break;
      }
    case 'l': {
        // check for GSMLOC (requires GPRS)
        uint16_t returncode;

        if (!fona.getGSMLoc(&returncode, replybuffer, 250))
          Serial.println(F("Failed!"));
        if (returncode == 0) {
          Serial.println(replybuffer);
        } else {
          Serial.print(F("Fail code #")); Serial.println(returncode);
        }

        break;
      }
    case 'w': {
        // read website URL
        uint16_t statuscode;
        int16_t length;
        char url[80];

        flushSerial();
        Serial.println(F("NOTE: in beta! Use small webpages to read!"));
        Serial.println(F("URL to read (e.g. 2):"));
        Serial.print(F("http://")); readline(url, 79);
        Serial.println(url);

        Serial.println(F("****"));
        if (!fona.HTTP_GET_start(url, &statuscode, (uint16_t *)&length)) {
          Serial.println("Failed!");
          break;
        }
        while (length > 0) {
          while (fona.available()) {
            char c = fona.read();

            // Serial.write is too slow, we'll write directly to Serial register!
#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
            loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
            UDR0 = c;
#else
            Serial.write(c);
#endif
            length--;
            if (! length) break;
          }
        }
        Serial.println(F("\n****"));
        fona.HTTP_GET_end();
        break;
      }

    case 'W': {
        // Post data to website
        uint16_t statuscode;
        int16_t length;
        char url[80];
        char data[80];

        flushSerial();
        Serial.println(F("NOTE: in beta! Use simple websites to post!"));
        Serial.println(F("URL to post (e.g. httpbin.org/post):"));
        Serial.print(F("http://")); readline(url, 79);
        Serial.println(url);
        Serial.println(F("Data to post (e.g. \"foo\" or \"{\"simple\":\"json\"}\"):"));
        readline(data, 79);
        Serial.println(data);

        Serial.println(F("****"));
        if (!fona.HTTP_POST_start(url, F("text/plain"), (uint8_t *) data, strlen(data), &statuscode, (uint16_t *)&length)) {
          Serial.println("Failed!");
          break;
        }
        while (length > 0) {
          while (fona.available()) {
            char c = fona.read();

#if defined(__AVR_ATmega328P__) || defined(__AVR_ATmega168__)
            loop_until_bit_is_set(UCSR0A, UDRE0); /* Wait until data register empty. */
            UDR0 = c;
#else
            Serial.write(c);
#endif

            length--;
            if (! length) break;
          }
        }
        Serial.println(F("\n****"));
        fona.HTTP_POST_end();
        break;
      }
    /*****************************************/

    case 'S': {
        Serial.println(F("Creating SERIAL TUBE"));
        while (1) {
          while (Serial.available()) {
            delay(1);
            fona.write(Serial.read());
          }
          if (fona.available()) {
            Serial.write(fona.read());
          }
        }
        break;
      }

    default: {
        Serial.println(F("Unknown command"));
        printMenu();
        break;
      }
  }
  // flush input
  flushSerial();
  while (fona.available()) {
    Serial.write(fona.read());
  }

}

void flushSerial() {
  while (Serial.available())
    Serial.read();
}

char readBlocking() {
  while (!Serial.available());
  return Serial.read();
}
uint16_t readnumber() {
  uint16_t x = 0;
  char c;
  while (! isdigit(c = readBlocking())) {
    //Serial.print(c);
  }
  Serial.print(c);
  x = c - '0';
  while (isdigit(c = readBlocking())) {
    Serial.print(c);
    x *= 10;
    x += c - '0';
  }
  return x;
}

uint8_t readline(char *buff, uint8_t maxbuff, uint16_t timeout) {
  uint16_t buffidx = 0;
  boolean timeoutvalid = true;
  if (timeout == 0) timeoutvalid = false;

  while (true) {
    if (buffidx > maxbuff) {
      //Serial.println(F("SPACE"));
      break;
    }

    while (Serial.available()) {
      char c =  Serial.read();

      //Serial.print(c, HEX); Serial.print("#"); Serial.println(c);

      if (c == '\r') continue;
      if (c == 0xA) {
        if (buffidx == 0)   // the first 0x0A is ignored
          continue;

        timeout = 0;         // the second 0x0A is the end of the line
        timeoutvalid = true;
        break;
      }
      buff[buffidx] = c;
      buffidx++;
    }

    if (timeoutvalid && timeout == 0) {
      //Serial.println(F("TIMEOUT"));
      break;
    }
    delay(1);
  }
  buff[buffidx] = 0;  // null term
  return buffidx;
}
